generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model action_events {
  id              BigInt    @id @default(autoincrement())
  batch_id        String    @db.Char(36)
  user_id         BigInt
  name            String    @db.VarChar(255)
  actionable_type String    @db.VarChar(255)
  actionable_id   BigInt
  target_type     String    @db.VarChar(255)
  target_id       BigInt
  model_type      String    @db.VarChar(255)
  model_id        BigInt?
  fields          String
  status          String    @default("running") @db.VarChar(25)
  exception       String
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)
  original        String?
  changes         String?

  @@index([actionable_type, actionable_id], map: "action_events_actionable_type_actionable_id_index")
  @@index([batch_id, model_type, model_id], map: "action_events_batch_id_model_type_model_id_index")
  @@index([user_id], map: "action_events_user_id_index")
}

model addresses {
  id                                             BigInt      @id @default(autoincrement())
  name                                           String      @db.VarChar(255)
  phone                                          String?     @db.VarChar(255)
  email                                          String?     @db.VarChar(255)
  document                                       String      @db.VarChar(255)
  street                                         String      @db.VarChar(255)
  number                                         String      @db.VarChar(255)
  complement                                     String?     @db.VarChar(255)
  neighborhood                                   String      @db.VarChar(255)
  city                                           String      @db.VarChar(255)
  state                                          String      @db.VarChar(255)
  country                                        String      @db.VarChar(255)
  zipcode                                        String      @db.VarChar(255)
  note                                           String?     @db.VarChar(255)
  default                                        Boolean     @default(false)
  user_id                                        BigInt
  created_at                                     DateTime?   @db.Timestamp(0)
  updated_at                                     DateTime?   @db.Timestamp(0)
  deleted_at                                     DateTime?   @db.Timestamp(0)
  users                                          users       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "addresses_user_id_foreign")
  shipments_addressesToshipments_address_from_id shipments[] @relation("addressesToshipments_address_from_id")
  shipments_addressesToshipments_address_to_id   shipments[] @relation("addressesToshipments_address_to_id")
}

model admins {
  id             BigInt       @id @default(autoincrement())
  name           String       @db.VarChar(255)
  email          String       @unique(map: "admins_email_unique") @db.VarChar(255)
  password       String       @db.VarChar(255)
  remember_token String?      @db.VarChar(100)
  created_at     DateTime?    @db.Timestamp(0)
  updated_at     DateTime?    @db.Timestamp(0)
  deleted_at     DateTime?    @db.Timestamp(0)
  rate_files     rate_files[]
}

model carriers {
  id           BigInt     @id @default(autoincrement())
  name         String     @db.VarChar(255)
  slug         String     @db.VarChar(255)
  tracking_url String?    @db.VarChar(255)
  is_active    Boolean    @default(false)
  created_at   DateTime?  @db.Timestamp(0)
  updated_at   DateTime?  @db.Timestamp(0)
  services     services[]
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement())
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String
  queue      String
  payload    String
  exception  String
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model jobs {
  id           BigInt @id @default(autoincrement())
  queue        String @db.VarChar(255)
  payload      String
  attempts     Int    @db.SmallInt
  reserved_at  Int?
  available_at Int
  created_at   Int

  @@index([queue], map: "jobs_queue_index")
}

model leads {
  id         BigInt    @id @default(autoincrement())
  email      String    @unique(map: "leads_email_unique") @db.VarChar(255)
  token      String    @db.VarChar(255)
  user_id    BigInt?
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model migrations {
  id        Int    @id @default(autoincrement())
  migration String @db.VarChar(255)
  batch     Int
}

model orders {
  id                BigInt          @id @default(autoincrement())
  amount            Float           @default(0)
  discount          Float           @default(0)
  type              String          @db.VarChar(255)
  method            String?         @db.VarChar(255)
  external_id       String?         @db.VarChar(255)
  user_id           BigInt?
  created_at        DateTime?       @db.Timestamp(0)
  updated_at        DateTime?       @db.Timestamp(0)
  captured_at       DateTime?       @db.Timestamp(0)
  paypal_payment_id String?         @db.VarChar(255)
  users             users?          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "orders_user_id_foreign")
  shipments         shipments[]
  user_balances     user_balances[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model password_resets {
  email      String    @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)

  @@index([email], map: "password_resets_email_index")
  @@ignore
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement())
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?
  last_used_at   DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model rate_files {
  id               BigInt          @id @default(autoincrement())
  file             String          @db.VarChar(255)
  name             String          @db.VarChar(255)
  status           String?         @db.VarChar(255)
  note             String?
  state            String?         @db.VarChar(255)
  service_id       BigInt
  user_category_id BigInt
  admin_id         BigInt?
  imported_at      DateTime?       @db.Timestamp(0)
  created_at       DateTime?       @db.Timestamp(0)
  updated_at       DateTime?       @db.Timestamp(0)
  admins           admins?         @relation(fields: [admin_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "rate_files_admin_id_foreign")
  services         services        @relation(fields: [service_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "rate_files_service_id_foreign")
  user_categories  user_categories @relation(fields: [user_category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "rate_files_user_category_id_foreign")
  rates            rates[]
}

model rates {
  id                      BigInt     @id @default(autoincrement())
  zipcode_start           String     @db.VarChar(255)
  zipcode_end             String     @db.VarChar(255)
  polygon_name            String?    @db.VarChar(255)
  weight_start            Decimal    @db.Decimal(10, 2)
  weight_end              Decimal    @db.Decimal(10, 2)
  absolute_money_cost     Float
  price_percent           Float
  price_by_extra_weight   Float
  max_volume              Decimal    @db.Decimal(10, 2)
  time_cost               String     @db.VarChar(255)
  country                 String     @default("BRL") @db.VarChar(255)
  minimum_value_insurance Float
  rate_file_id            BigInt
  created_at              DateTime?  @db.Timestamp(0)
  updated_at              DateTime?  @db.Timestamp(0)
  rate_files              rate_files @relation(fields: [rate_file_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "rates_rate_file_id_foreign")

  @@index([rate_file_id, zipcode_start, zipcode_end, weight_start, weight_end], map: "zip_weight_index")
}

model services {
  id               BigInt       @id @default(autoincrement())
  name             String       @db.VarChar(255)
  slug             String       @db.VarChar(255)
  token            String?      @db.VarChar(255)
  class_name       String?      @db.VarChar(255)
  integration_code String?      @db.VarChar(255)
  is_active        Boolean      @default(false)
  carrier_id       BigInt
  created_at       DateTime?    @db.Timestamp(0)
  updated_at       DateTime?    @db.Timestamp(0)
  carriers         carriers     @relation(fields: [carrier_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "services_carrier_id_foreign")
  rate_files       rate_files[]
  shipments        shipments[]
}

model shipments {
  id                                             BigInt     @id @default(autoincrement())
  amount                                         Float      @default(0)
  width                                          Float
  height                                         Float
  length                                         Float
  weight                                         Float
  insurance_value                                Float
  own_hand                                       Boolean    @default(false)
  receipt                                        Boolean    @default(false)
  external_id                                    String?    @db.VarChar(255)
  external_data                                  Json?      @db.Json
  tracking_url                                   String?    @db.VarChar(255)
  service_id                                     BigInt?
  order_id                                       BigInt?
  user_id                                        BigInt?
  risk                                           String?
  address_from_id                                BigInt?
  address_to_id                                  BigInt?
  shipped_at                                     DateTime?  @db.Timestamp(0)
  created_at                                     DateTime?  @db.Timestamp(0)
  updated_at                                     DateTime?  @db.Timestamp(0)
  in_care                                        String?    @db.VarChar(255)
  addresses_addressesToshipments_address_from_id addresses? @relation("addressesToshipments_address_from_id", fields: [address_from_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "shipments_address_from_id_foreign")
  addresses_addressesToshipments_address_to_id   addresses? @relation("addressesToshipments_address_to_id", fields: [address_to_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "shipments_address_to_id_foreign")
  orders                                         orders?    @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "shipments_order_id_foreign")
  services                                       services?  @relation(fields: [service_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "shipments_service_id_foreign")
  users                                          users?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "shipments_user_id_foreign")
}

model statuses {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  reason     String?
  model_type String    @db.VarChar(255)
  model_id   BigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)

  @@index([model_type, model_id], map: "statuses_model_type_model_id_index")
}

model telescope_entries {
  sequence                BigInt                   @id @default(autoincrement())
  uuid                    String                   @unique(map: "telescope_entries_uuid_unique") @db.Uuid
  batch_id                String                   @db.Uuid
  family_hash             String?                  @db.VarChar(255)
  should_display_on_index Boolean                  @default(true)
  type                    String                   @db.VarChar(20)
  content                 String
  created_at              DateTime?                @db.Timestamp(0)
  telescope_entries_tags  telescope_entries_tags[] @ignore

  @@index([batch_id], map: "telescope_entries_batch_id_index")
  @@index([created_at], map: "telescope_entries_created_at_index")
  @@index([family_hash], map: "telescope_entries_family_hash_index")
  @@index([type, should_display_on_index], map: "telescope_entries_type_should_display_on_index_index")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model telescope_entries_tags {
  entry_uuid        String            @db.Uuid
  tag               String            @db.VarChar(255)
  telescope_entries telescope_entries @relation(fields: [entry_uuid], references: [uuid], onDelete: Cascade, onUpdate: NoAction, map: "telescope_entries_tags_entry_uuid_foreign")

  @@index([entry_uuid, tag], map: "telescope_entries_tags_entry_uuid_tag_index")
  @@index([tag], map: "telescope_entries_tags_tag_index")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model telescope_monitoring {
  tag String @db.VarChar(255)

  @@ignore
}

model user_balances {
  id                  BigInt    @id @default(autoincrement())
  amount              Float     @default(0)
  user_id             BigInt
  order_id            BigInt?
  created_at          DateTime? @db.Timestamp(0)
  updated_at          DateTime? @db.Timestamp(0)
  admin_id            Int?
  payment_date        DateTime? @db.Timestamp(0)
  payment_form        String?   @db.VarChar(255)
  transaction_id      String?   @db.VarChar(255)
  payment_option      String?   @db.VarChar(255)
  payment_external_id String?   @db.VarChar(255)
  orders              orders?   @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_balances_order_id_foreign")
  users               users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_balances_user_id_foreign")
}

model user_categories {
  id         BigInt       @id @default(autoincrement())
  name       String       @db.VarChar(255)
  is_default Boolean      @default(false)
  created_at DateTime?    @db.Timestamp(0)
  updated_at DateTime?    @db.Timestamp(0)
  deleted_at DateTime?    @db.Timestamp(0)
  rate_files rate_files[]
  users      users[]
}

model users {
  id                 BigInt               @id @default(autoincrement())
  name               String               @db.VarChar(255)
  birthdate          DateTime             @db.Date
  email              String               @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at  DateTime?            @db.Timestamp(0)
  document           String               @db.VarChar(255)
  company_name       String?              @db.VarChar(255)
  phone              String?              @db.VarChar(255)
  password           String               @db.VarChar(255)
  remember_token     String?              @db.VarChar(100)
  created_at         DateTime?            @db.Timestamp(0)
  updated_at         DateTime?            @db.Timestamp(0)
  deleted_at         DateTime?            @db.Timestamp(0)
  user_category_id   BigInt?
  wallet_id          String?
  role               String               @default("user")
  user_categories    user_categories?     @relation(fields: [user_category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_user_category_id_foreign")
  addresses          addresses[]
  marketplace_orders marketplace_orders[]
  orders             orders[]
  shipments          shipments[]
  user_balances      user_balances[]
}

model marketplace_shipments {
  id                   BigInt             @id @default(autoincrement())
  marketplace_name     String             @db.VarChar(255)
  tracking_id          String             @db.VarChar(255)
  to_zip_code          String?            @db.VarChar(255)
  marketplace_order_id BigInt
  created_at           DateTime?          @db.Timestamp(0)
  updated_at           DateTime?          @db.Timestamp(0)
  marketplace_orders   marketplace_orders @relation(fields: [marketplace_order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "marketplace_shipments_marketplace_order_id_foreign")
}

model marketplace_orders {
  id                    BigInt                  @id @default(autoincrement())
  objects_quantity      String                  @db.VarChar(255)
  user_id               BigInt
  created_at            DateTime?               @db.Timestamp(0)
  updated_at            DateTime?               @db.Timestamp(0)
  users                 users                   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "marketplace_orders_user_id_foreign")
  marketplace_shipments marketplace_shipments[]
}
